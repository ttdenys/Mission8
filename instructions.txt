Mission 8
1   Introduction

L'objectif principal de cette mission est de définir et d'utiliser trois classes correspondant respectivement à une durée (une espace de temps sous la forme heures-minutes-secondes), à une chanson (caractérisée par un titre, un auteur et une durée) et à un album (un ensemble de chansons). Vous utiliserez ensuite ces classes pour réaliser la génération d'albums souhaitée. Vous travaillerez par groupes de deux.

Dans le cadre du prototype à réaliser, les chansons vous sont fournies dans un fichier contenant des lignes de texte:

"TITRE AUTEUR MIN SEC"

où "TITRE", "AUTEUR", "MIN" et "SEC" correspondent respectivement au titre, à l'auteur, et à la durée de la chanson en minutes et secondes, et ne contiennent eux-mêmes pas d'espaces, par exemple:

Let's_Dance David_Bowie 4 5
Relax Frankie_Goes_To_Hollywood 3 54
Purple_Rain Prince 5 48
Enjoy_The_Silence Depeche_Mode 4 13

Ce format facilite leur lecture. On vous rappelle que la méthode split() permet de séparer un string contenant des espaces en mots individuels.

Il est plus que jamais important de bien tester votre code, étant donné que les classes que vous définissez pourront être utilisées dans des usages multiples. Au sein de votre binôme, pendant qu'un étudiant se concentre sur le développement d'une classe, l'autre pourrait préparer les tests pour cette classe. Les spécifications des méthodes étant donné par avance, il est en effet tout à fait possible de préparer des tests en même temps que (voire avant) la classe à tester. Il s'agit en quelque sorte d'un jeu: le développeur parviendra-t-il à écrire une classe qui fonctionnera correctement sous toutes les attaques du testeur? Le testeur parviendra-t-il à trouver le test qui causera un fonctionnement incorrect?

Remarque: Lors de cette mission vous utiliserez encore les instructions 'assert' pour tester votre programme orienté objet. Dans une mission futur nous introduirons le mécanisme des 'tests unitaires' qui sera encore mieux approprié pour tester du code orienté objets.
2   Etapes
2.1   Fichiers

Chargez les fichiers "music-db.txt", "mission8.py" et "test.py".

    "music-db.txt" contient une liste de plus de 300 chansons, au format décrit ci-dessus.
    "mission8.py" contient la définition des 3 classes Duree, Chanson et Album à compléter, mais avec une implémentation vide.
    "test.py" contient une ébauche (à compléter par vous) d'un ensemble de fonctions test pour tester le bon comportement des 3 classes et du programme à réaliser.

2.2   La classe Duree

Commencez par définir la classe Duree qui représente une durée exprimée en heures (h), minutes (m) et secondes (s).

Ajoutez d'abord la méthode d'initialisation __init__(self, h, m, s), qui requiert que m et s soient dans l'intervalle [0..60[ et crée un nouveau temps de h heures, m minutes et s secondes. Ajoutez une spécification à cette méthode et vérifiez que les conditions requises soient bien respectées.

def __init__(self,h,m,s):
    """
    @pre: h, m et s sont des entiers positifs (ou zéro)
          m et s sont < 60
    @post: Crée une nouvelle durée en heures, minutes et secondes.
    """

Ajoutez ensuite les méthodes correspondant aux spécifications suivantes:

def to_secondes(self):
    """
    @pre:  -
    @post: Retourne le nombre total de secondes de cette instance de Duree (self).
    Par exemple, une durée de 8h 41m 25s compte 31285 secondes.
    """

def delta(self,d) :
    """
    @pre:  d est une instance de la classe Duree
    @post: Retourne la différence en secondes entre cette durée (self)
           et la durée d passée en paramètre.
           Cette valeur renovoyée est positif si cette durée (self)
           est plus grand que la durée d, négatif sinon.
    Par exemple, si cette durée (self) est 8h 41m 25s (donc 31285 secondes)
    et la durée d est 0h 1m 25s, la valeur retournée est 31200.
    Inversement, si cette durée (self) est 0h 1m 25s et la durée
    d est 8h 41m 25s, alors la valeur retournée est -31200.
    """

def apres(self,d):
    """
    @pre:  d est une instance de la classe Duree
    @post: Retourne True si cette durée (self) est plus grand que la durée
           d passée en paramètre; retourne False sinon.
    """

def ajouter(self,d):
    """
    @pre:  d est une instance de la classe Duree
    @post: Ajoute une autre durée d à cette durée (self),
           corrigée de manière à ce que les minutes et les secondes soient
           dans l'intervalle [0..60[, en reportant au besoin les valeurs
           hors limites sur les unités supérieures
           (60 secondes = 1 minute, 60 minutes = 1 heure).
           Ne retourne pas une nouvelle durée mais modifié la durée self.
    """

def __str__(self):
    """
    @pre:  -
    @post: Retourne cette durée sous la forme de texte "heures:minutes:secondes".
    Astuce: l'expression "{:02}:{:02}:{:02}".format(heures, minutes, secondes)
    retourne le string désiré avec les nombres en deux chiffres en ajoutant
    les zéros nécessaires.
    """

2.3   Tester la classe Duree

Dans le fichier test.py, ajoutez ou complétez au fur et à mesure des fonctions tests pour tester la classe Duree. Exécutez ces tests régulièrement et assurez-vous que les résultats sont conformes aux spécifications, en corrigeant au besoin.

Il est une bonne idée d'avoir un ou plusieurs tests, avec différents scénarios de test, par méthode de la classe Duree. Par exemple, pour la méthode ajouter() de votre classe Duree, vous pourrez implémenter une fonction test_Duree_ajouter() pour tester les différents scénarios d'utilisation de la méthode ajouter() de cette classe. Vous pouvez vous inspirer des quelques tests qui se trouvent déjà dans le fichier test.py.
2.4   La classe Chanson

Définissez maintenant la classe Chanson représentant une chanson, caractérisée par un titre t (string), un auteur a (string) et une durée d (Duree). Implémentez la méthode d'initialisation __init__ ainsi que la méthode de conversion __str__ correspondant aux spécifications suivantes:

 def __init__(self,t,a,d):
     """
     @pre:  t et a sont des string, d est une instance de la classe Duree
     @post: Crée une nouvelle chanson, caractérisée par un titre t,
            un auteur a et une durée d.
     """

def __str__(self):
    """
    @pre:  -
    @post: Retourne un string décrivant cette chanson sous le format
           "TITRE - AUTEUR - DUREE".
           Par exemple: "Let's_Dance - David_Bowie - 00:04:05"
    """

2.5   Tester la classe Chanson

Ajoutez au fichier test.py une série de tests pour tester les différentes méthodes de la classe Chanson.
2.6   La classe Album

Définissez maintenant la classe Album représentant un album contenant une ou plusieurs chansons.

Implémentez d'abord la méthode d'initialisation __init__ pour créer un album vide:

def __init__(self, numero):
    """
    @pre:  numero est un entier identifiant de facon unique cet album
    @post: Crée un nouvel album, avec comme identifiant le numero,
           et avec une liste de chansons vide.
    """

Implémentez également une méthode add(self,chanson) pour ajouter une chanson à un album. Cette méthode retourne False et ne modifie rien si lors de l'ajout de la chanson l'album aurait atteint 100 chansons ou sa durée aurait dépassé 75 minutes. Sinon la chanson est rajoutée à la fin de la liste des chansons de cet album, la durée totale de l'album est augmentée avec la durée de la chanson, et la méthode add retourne True.

Finalement, implémentez la méthode de conversion __str__ pour imprimer la description d'un album selon le format suivant:

Album 21 (12 chansons, 00:47:11)
01: White_Wedding - Billy_Idol - 00:04:12
02: Stand_And_Deliver - Adam_&_The_Ants - 00:03:33
03: You_Spin_Me_Around - Dead_Or_Alive - 00:03:14
04: Wired_For_Sound - Cliff_Richard - 00:03:38
05: Some_Like_It_Hot - The_Power_Station - 00:03:45
06: 99_Luftballons - Nena - 00:03:50
07: Keep_On_Loving_You - Reo_Speedwagon - 00:03:22
08: Seven_Into_The_Sea - In_Tua_Nua - 00:03:51
09: Love_Is_A_Battlefield - Pat_Benatar - 00:05:20
10: Etienne - Guesch_Patti - 00:04:07
11: This_Is_Not_A_Love_Song - Public_Image_Limited - 00:04:12
12: Love_Missile_F1-11 - Sigue_Sigue_Sputnik - 00:04:07

2.7   Tester la classe Album

Ajoutez au fichier test.py une série de tests pour tester la classe Album.
2.8   Le programme

Finalement, complétez votre programme par une série d'instructions qui:

    lit dans le fichier music-db.txt, ligne par ligne, des descriptifs de chanson au format décrit en tête de cette section;
    pour chaque ligne lue, construite une instance de Chanson;
    stocke ses chansons dans un album avec identifiant le numéro 1;
    lorsque le nombre de chansons stockés dans cet album a atteint 100 chansons ou la durée dépasserait 75 minutes, imprime à la console un descriptif de cet album avec les chansons accumulées, suivant l'exemple donné ci-dessus;
    poursuit la lecture du fichier et l'ajout des chansons dans un album suivant (incrémentez le numéro identifiant l'album de 1 pour chaque nouvel album);
    répète ces étapes jusqu'à ce que le fichier est vide et imprime le dernier album.

Si tout va bien votre programme final produira l'output suivant

Album 1 (17 chansons, 01:10:55)
01: Let's_Dance - David_Bowie - 00:04:05
02: Relax - Frankie_Goes_To_Hollywood - 00:03:54
03: Purple_Rain - Prince - 00:05:48
04: Enjoy_The_Silence - Depeche_Mode - 00:04:13
05: Chacun_Fait_C'Qui_Lui_Plait - Chagrin_D'amour - 00:04:08
06: Love_Missile_F1-11 - Sigue_Sigue_Sputnik - 00:04:06
07: Spaceman - Babylon_Zoo - 00:03:59
08: Hijo_De_La_Luna - Mecano - 00:04:19
09: 7_Seconds - Youssou_N'Dour_&_Neneh_Cherry - 00:03:48
10: Osez_Josephine - Alain_Bashung - 00:02:57
11: Dejeuner_En_Paix - Stephan_Eicher - 00:03:27
12: New_Gold_Dream - Simple_Minds - 00:05:31
13: Missing - Everything_But_The_Girl - 00:04:44
14: Nineteen - Paul_Hardcastle - 00:03:38
15: Killer - Adamski - 00:04:13
16: Unbelievable - EMF - 00:03:29
17: Overload - Sugababes - 00:04:36

Album 2 (17 chansons, 01:11:24)
01: Ice_Ice_Baby - Vanilla_Ice - 00:04:29
02: Do_You_Really_Want_To_Hurt_Me - Culture_Club - 00:04:23
03: Under_The_Milky_Way - The_Church - 00:04:57
04: Shout - Tears_For_Fears - 00:06:29
05: Pure_Morning - Placebo - 00:04:15
06: Porcelain - Moby - 00:04:00
07: Toi_Mon_Toit - Elli_Medeiros - 00:03:37
08: Just_A_Friend_Of_Mine - Vaya_Con_Dios - 00:03:22
09: Sleeping_Satellite - Tasmin_Archer - 00:04:36
10: I_Won't_Let_You_Down - DPH - 00:04:05
11: A_Girl_Like_You - The_Smithereens - 00:04:36
12: Ready_To_Go - Republica - 00:03:39
13: Oh_Carolina - Shaggy - 00:03:10
14: La_Sonora - Starflam - 00:03:49
15: Tombe_Pour_La_France - etienne_Daho - 00:04:13
16: The_Captain_Of_My_Heart - Double - 00:03:58
17: Human - Human_League - 00:03:46

...

Album 21 (12 chansons, 00:47:11)
01: White_Wedding - Billy_Idol - 00:04:12
02: Stand_And_Deliver - Adam_&_The_Ants - 00:03:33
03: You_Spin_Me_Around - Dead_Or_Alive - 00:03:14
04: Wired_For_Sound - Cliff_Richard - 00:03:38
05: Some_Like_It_Hot - The_Power_Station - 00:03:45
06: 99_Luftballons - Nena - 00:03:50
07: Keep_On_Loving_You - Reo_Speedwagon - 00:03:22
08: Seven_Into_The_Sea - In_Tua_Nua - 00:03:51
09: Love_Is_A_Battlefield - Pat_Benatar - 00:05:20
10: Etienne - Guesch_Patti - 00:04:07
11: This_Is_Not_A_Love_Song - Public_Image_Limited - 00:04:12
12: Love_Missile_F1-11 - Sigue_Sigue_Sputnik - 00:04:07

2.9   Tester le programme

Complétez le fichier test.py avec quelques tests pour démontrer que vos 3 classes Duree, Chanson et Album collaborent correctement et peuvent être utilisés pour créer des albums de chansons.
3   Diagramme de classes

Le diagramme de classes suivant résume les différentes classes et méthodes à implémenter lors de cette mission :
/syllabus/info1-exercises/assets/class_diagram_mission8.png
4   Remise de votre solution

Pour cette mission, vous devez soumettre votre programme mission8.py, le fichier test.py avec vos fonctions de tests pour les différentes classes que vous avez implémenté et votre fichier README.txt au serveur de soumissions de programmes du cours.

Votre fichier mission8.py doit contenir une définition des classes Duree, Chanson et Album, ainsi qu'une série d'instructions pour lire le fichier et créer et imprimer les albums.

Votre fichier test.py doit au moins contenir des tests pour les différentes méthodes des classes Duree, Chanson et Album, ainsi qu'une série d'instructions pour lancer tous les tests.

L'exécution de votre programme mission8.py doit imprimer l'output ci-dessus sur base du fichier original music-db.txt. Il ne vous est pas permis de faire des modifications à ce fichier.